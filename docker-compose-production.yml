version: "3.8"

networks:
  web:
    external: true
  internal:
    external: false
services:
  peludosclickfrontendservice:
    container_name: angular-frontend
    build: 
      dockerfile: production.Dockerfile
      context: ./frontend
      target: production
    volumes:
      - ./frontend:/alberto/frontend/src/app
      - /alberto/src/app/node_modules
    ports:
      - "9002:80"
    labels:
      - traefik.http.routers.peludosclickfrontendservice.rule=Host(`peludosclick.com`)
      - traefik.http.routers.peludosclickfrontendservice.tls=true
      - traefik.http.routers.peludosclickfrontendservice.tls.certresolver=lets-encrypt
      - traefik.port=9002
    networks:
      - internal
      - web
  
  backendPeludosclick:
    build: 
      context: ./backend-vlad
      dockerfile: production.Dockerfile
      target: production
    container_name: peludosclickbackend
    volumes:
      - ./backend-vlad:/alberto/backend/src/app
      - /alberto/backend/src/app/node_modules
    command: npx prisma generate
    # command: npx prisma migrate deploy
    # command: npm run start:prod
    ports:
      - '3335:3335'
    depends_on: 
      - postgres
    env_file: "./backend-vlad/.my-env-production"
    labels:
      - traefik.http.routers.distfrontend.rule=Host(`api.bici-arbol.com`)
      - traefik.http.routers.distfrontend.tls=true
      - traefik.http.routers.distfrontend.tls.certresolver=lets-encrypt
      - traefik.port=3335
    networks:
      - internal
      - web
  # Our Postgres Database for NestJS to connect to
  postgresPeludos:
    image: postgres:10.4
    environment:
      POSTGRES_USER: Silvestre1993
      POSTGRES_PASSWORD: iendlshLANDHG423423480
      POSTGRES_DB: peludosclick
    ports:
      - 5435:5435
    labels:
      - traefik.enable=false
    networks:
      - internal

